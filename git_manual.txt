1. git 설치
git 검색 및 다운로드
default로 다운로드 합니다

2. git 기본 걔념
working tree 는 add 하여서 내가 작업하고 관리하는 파일들의 공간입니다
commit 은 working tree 에 올라온 수정 사항을 local repository 에 실제로 버전을 관리하게 됩니다
push 는 원격 저장소에 올리게 됩니다

3. git 사용법
git을 설치하면 git bash 와 git cmd 등을 확인할 수 있다
git cmd 는 window 환경에서의 터미널
git bash 는 linux 환경에서의 터미널
comit 할 때는 매번 add 후에 commit 합니다
add 할 때는 파일뿐만 아니라 디렉토리도 add 할 수 있으며 
디렉토리가 대상인 경우 디렉토리 하위의 모든 파일을 add 합니다
commit 할 때 -a 명령어는 기존에 등록된 파일들만 add 해줍니다

4. git config 파일 설정
git config --global --edit > config 파일을 직접 열어서 수정할 수 있다
git config --global core.editor "에디터" > 에디터는 nano, vim 등이 있다
git config --global core.quotepath false > 파일 제목이 한글일 때 깨짐 현상 해결
git config --global user.email "이메일" > git 유저 이메일 설정 
git config --global user.name "이름" > git 유저 이름 설정

5. git 기본 명령어
git > git의 기본명령어 및 버전 등을 확인할 수 있다.
git init . > 현재경로를 버전관리 시작하겠다는 명령어
git status > 상태확인 명령어
git add 파일 > '파일' 을 관리영역에 올리는 명령어
git rm --cached 파일 > '파일' 을 관리영역에서 내리는 명령어
git commit > commit message 를 좀 더 자세하게 기술할 수 있습니다.
git commit -m "내용" > 
repository 로 올리는 명령어 -m 은 commit 할 내용을 작성하는 명령어
git commit -am "내용" > -a 는 add 와 동시에 commit 하는 명령어
git commit --amend -m "내용" > 가장 최근 commit message 를 수정합니다
git log > 버전의 history 를 볼 수 있다
git log --stat > 버전과 변경된 파일의 리스트를 보여줍니다
git log -p > 버전과 변경된 파일과 실제 변경된 내용까지 보여줍니다
git shortlog > 로그를 짧게 보여줍니다
git log --all --graph --oneline > 브렌치를 그래프로 한눈에 볼 수 있다
git diff > 변경점을 보여주는 명령어
git reset --hard > 
commit 하기전 지금까지 변경한 내용을 지우는 명령어 
hard 는 변경하고있는 내용을 포함해서 강력하게 지우는 명령어입니다
hard 외의 soft, mixed 가 있습니다 명시하지 않으면 기본이 mixed 입니다
git reset --hard commitID > 해당 버전으로 이동하고 그 이후의 버전은 삭제합니다
git reset --help > git reset 의 자세한 명령어 사용법을 기술합니다
git reset 시점~1 > '시점' 에서 1칸 뒤로 commit 까지 되돌립니다
git revert HEAD > 
'HEAD' 의 버전을 바로 전 버전의 새로운 버전으로 commit 합니다
주의 할 점은 가장 최근의 버전에서만 동작합니다
git reflog > 과거의 모든 버전의 내용을 볼 수 있다

6. git 원격저장소 명령어
git init --bare remote.git > 'remote' 라는 원격 저장소를 생성합니다
git remote add origin 원격주소 > 내 버전관리 파일을 'origin' 이란 이름으로 원격저장소에 연결합니다
git push origin :develop > 로컬에서 삭제된 develop 브랜치 내용을 원격저장소에 업로드합니다
git push origin master > ?
git push -u origin master >
처음 설정할 때 -u를 사용합니다
master 의 내용을 origin 에 업로드합니다
기본 원격 저장소 설정 시 'origin' 과 'master' 를 생략할 수 있다
git push --set-upstream origin master > 'master' 를 'origin' 의 기본 원격 저장소로 설정
git clone 원격주소 원하는폴더 > 
'원하는폴더' 생략 시 '원격주소'의 마지막 경로폴더가 생성되며 저장소의 소스를 불러온다
git remote > 어떤 원격 저장소가 있는지 확인하는 명령어
git remote -v > 어떤 원격 저장소에 연결되어 있는지 알 수 있습니다
git pull origin master > 
origin 의 내용을 master 로 가져옵니다
기본 원격 저장소를 설정한 경우 origin 과 master 는 생략이 가능합니다

7. git branch 사용법
git branch > 브랜치의 내역을 봅니다
git branch apple > 'apple' 이란 브랜치를 만듭니다
git branch -D apple > 'apple' 이란 브랜치를 삭제합니다
git checkout commitID > 'commitID' 의 버전으로 이동합니다
git checkout apple > 'apple' 브랜치로 HEAD 가 이동한다
git merge o2 > 'o2' 브랜치의 내용을 현재 브랜치와 병합합니다
git fetch > 원격 저장소의 버전만 업데이트합니다
git fetch; git merge FETCH_HEAD > 
fetch 와 merge 를 동시에 하는 명령어 입니다
git 은 FETCH_HEAD 명령어를 통해 원격저장소의 가장 최근 버전을 기억하고 있습니다

8. git cherry-pick & rebase
git cherry-pick commitID > 현재 브랜치에 'commitID' 버전의 변화만을 새로운 버전으로 만듭니다
git rebase commitID > 
현재 브랜치에 base 를 'commitID' 버전으로 변경합니다
주의할 점은 원격 저장소에 push 하기 전에 로컬에서만 사용해야 합니다

9. git 협업 관련 명령어 및 사용법
git format-patch commitID > 'commitID' 를 기준으로 수정된 버전을 파일로 만드는 명령어
git am -3 -i *.patch > 
모든 .patch 파일을 3way-merge 로 인터렉티브 모드로 파일을 commit 합니다
인터렉티브 모드는 사용자에게 어떻게 적용할 것인지 물어보며 진행하는 모드입니다
v 는 내용을 볼 수 있다 y 는 파일을 commit 합니다
e 는 commit 메세지를 변경할 수 있습니다

10. ssh 설정 on window
설정 > 앱 > 앱 및 기능 > 선택적 기능 > 기능 추가 > OpenSSH 서버 설치
Get-Service sshd > PowerShell 에서 실행할 수 있으며 ssh 상태를 가져옵니다
Start-Service sshd > PowerShell 에서 실행할 수 있으며 ssh 를 실행합니다
Stop-Service sshd > PowerShell 에서 실행할 수 있으며 ssh 를 중지합니다
Restart-Service sshd > PowerShell 에서 실행할 수 있으며 ssh 를 재시작합니다
New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Program Files\Git\bin\bash.exe" -PropertyType String -Force >
PowerShell 에서 실행할 수 있으며 git bash 를 기본으로 바꿔주는 명령어

11. vim 에디터 사용법
파일작성 후 esc > :wq
w 는 write
q 는 quit

12. 번외
git flow 를 검색해보자 
git 으로 협업을 할 때 branch 권장 사용법에 대하여 설명하고 있습니다



